-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS test.catalog
(
    catalog_id text NOT NULL,
    type text NOT NULL,
    igsn text,
    container text COLLATE pg_catalog."default" NOT NULL,
    location text COLLATE pg_catalog."default" NOT NULL,
    temp_stored integer,
    mass numeric NOT NULL,
    mass_unit text NOT NULL,
    PRIMARY KEY (catalog_id)
);

CREATE TABLE IF NOT EXISTS test.cores
(
    core_catalog_id text NOT NULL,
    core_igsn text,
    corer_type text COLLATE pg_catalog."default" NOT NULL,
    diameter_cm integer,
    name_short text COLLATE pg_catalog."default" NOT NULL,
    name_long text COLLATE pg_catalog."default" NOT NULL,
    station_id integer NOT NULL,
    length integer,
    length_unit text COLLATE pg_catalog."default",
    PRIMARY KEY (core_catalog_id)
);

CREATE TABLE IF NOT EXISTS test.funding
(
    grant_id text NOT NULL,
    grant_number text COLLATE pg_catalog."default" NOT NULL,
    grant_title text COLLATE pg_catalog."default" NOT NULL,
    funding_agency text COLLATE pg_catalog."default" NOT NULL,
    recipient_agency text COLLATE pg_catalog."default" NOT NULL,
    project_id integer NOT NULL,
    url text,
    PRIMARY KEY (grant_id)
);

CREATE TABLE IF NOT EXISTS test.intake_samples
(
    sample_catalog_id text NOT NULL,
    drive_catalog_id text NOT NULL,
    description text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default" NOT NULL,
    material text COLLATE pg_catalog."default" NOT NULL,
    mass numeric,
    mass_unit text COLLATE pg_catalog."default",
    collection_date date,
    submission_date date,
    station_collected integer,
    igsn_num text,
    sample_type text COLLATE pg_catalog."default",
    project_id integer NOT NULL,
    researcher_id integer NOT NULL,
    stratum_id_num integer,
    sampling_method text COLLATE pg_catalog."default",
    volume numeric,
    volume_unit text,
    current_state text NOT NULL,
    CONSTRAINT sample_catalog_id PRIMARY KEY (sample_catalog_id)
);

CREATE TABLE IF NOT EXISTS test.mounts
(
    mount_id integer NOT NULL,
    sample_id text NOT NULL,
    mount_type text COLLATE pg_catalog."default" NOT NULL,
    prep_date date,
    storage_location text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT mounts_pkey PRIMARY KEY (mount_id)
);

CREATE TABLE IF NOT EXISTS test.projects
(
    project_id integer NOT NULL,
    name text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    geography text COLLATE pg_catalog."default",
    start_date date,
    end_date date,
    url text COLLATE pg_catalog."default",
    CONSTRAINT projects_pkey PRIMARY KEY (project_id)
);

CREATE TABLE IF NOT EXISTS test.projects_catalog
(
    project_id integer NOT NULL,
    catalog_id text NOT NULL
);

CREATE TABLE IF NOT EXISTS test.projects_roles
(
    project_id integer NOT NULL,
    researcher_id integer NOT NULL,
    roles text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT projects_roles_pkey PRIMARY KEY (project_id, researcher_id)
);

CREATE TABLE IF NOT EXISTS test.researchers
(
    researcher_id integer NOT NULL,
    first_name text COLLATE pg_catalog."default" NOT NULL,
    last_name text COLLATE pg_catalog."default" NOT NULL,
    title text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default",
    orcid_id text COLLATE pg_catalog."default",
    current_institution text NOT NULL,
    CONSTRAINT researchers_pkey PRIMARY KEY (researcher_id)
);

CREATE TABLE IF NOT EXISTS test.researchers_intake
(
    catalog_id text NOT NULL,
    submitter integer NOT NULL,
    collector integer NOT NULL,
    PRIMARY KEY (catalog_id)
);

CREATE TABLE IF NOT EXISTS test.sessions
(
    session_id integer NOT NULL,
    mount_id integer NOT NULL,
    analyst integer NOT NULL,
    analyzed_date date NOT NULL,
    beam_diameter double precision,
    reference_material text COLLATE pg_catalog."default" NOT NULL,
    instrument_id integer NOT NULL,
    CONSTRAINT sessions_pkey PRIMARY KEY (session_id)
);

CREATE TABLE IF NOT EXISTS test.stations
(
    "station_id " integer NOT NULL,
    strabospot_id text COLLATE pg_catalog."default",
    name text COLLATE pg_catalog."default" NOT NULL,
    description text COLLATE pg_catalog."default",
    purpose text COLLATE pg_catalog."default" NOT NULL,
    station_type text COLLATE pg_catalog."default",
    location_coordinates point NOT NULL,
    precision_lat double precision,
    precision_long double precision,
    start_date date NOT NULL,
    start_time time with time zone,
    CONSTRAINT stations_pkey PRIMARY KEY ("station_id ")
);

CREATE TABLE IF NOT EXISTS test.stratum_id
(
    stratum_id_num integer NOT NULL,
    formation_name text COLLATE pg_catalog."default" NOT NULL,
    location double precision NOT NULL,
    position_description text COLLATE pg_catalog."default",
    age_description text COLLATE pg_catalog."default",
    volcano_name text NOT NULL,
    eruption_name text NOT NULL,
    event_id text NOT NULL,
    event_date date NOT NULL,
    event_description text NOT NULL,
    top_depth numeric NOT NULL,
    bottom_depth numeric NOT NULL,
    thickness numeric NOT NULL,
    CONSTRAINT stratum_id_pkey PRIMARY KEY (stratum_id_num)
);

CREATE TABLE IF NOT EXISTS test.drives
(
    drive_catalog_id text NOT NULL,
    drive_igsn text,
    core_catalog_id text NOT NULL,
    station_id integer NOT NULL,
    top_depth numeric NOT NULL,
    bottom_depth numeric NOT NULL,
    length numeric,
    length_unit text,
    date_collected date,
    core_type text,
    catolog_id integer NOT NULL,
    PRIMARY KEY (drive_catalog_id)
);

CREATE TABLE IF NOT EXISTS test.institutions
(
    institution_id integer NOT NULL,
    name text NOT NULL,
    state_located text NOT NULL,
    PRIMARY KEY (institution_id)
);

CREATE TABLE IF NOT EXISTS test.media
(
    media_id integer NOT NULL,
    catalog_id text NOT NULL,
    url text NOT NULL,
    url_description text,
    PRIMARY KEY (media_id)
);

CREATE TABLE IF NOT EXISTS test.researcher_history
(
    entry_id integer NOT NULL,
    researcher_id integer,
    institution_id integer,
    start_date date,
    end_date date,
    comment text,
    PRIMARY KEY (entry_id)
);

CREATE TABLE IF NOT EXISTS test.sample_history
(
    entry_id integer NOT NULL,
    catalog_id text NOT NULL,
    mass_taken numeric,
    mass_taken_unit text,
    volume_taken numeric,
    volume_taken_unit text,
    container text NOT NULL,
    location text NOT NULL,
    PRIMARY KEY (entry_id)
);

ALTER TABLE IF EXISTS test.cores
    ADD CONSTRAINT core_catalog_id_fk FOREIGN KEY (core_catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.cores
    ADD CONSTRAINT station_id FOREIGN KEY (station_id)
    REFERENCES test.stations ("station_id ") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.funding
    ADD CONSTRAINT projects_id FOREIGN KEY (project_id)
    REFERENCES test.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.intake_samples
    ADD CONSTRAINT station_collected FOREIGN KEY (station_collected)
    REFERENCES test.stations ("station_id ") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.intake_samples
    ADD CONSTRAINT sample_catalog FOREIGN KEY (sample_catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.intake_samples
    ADD CONSTRAINT drive_catalog_id FOREIGN KEY (drive_catalog_id)
    REFERENCES test.drives (drive_catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.intake_samples
    ADD CONSTRAINT stratum_id_num FOREIGN KEY (stratum_id_num)
    REFERENCES test.stratum_id (stratum_id_num) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.mounts
    ADD CONSTRAINT sample_id FOREIGN KEY (sample_id)
    REFERENCES test.intake_samples (sample_catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.projects_catalog
    ADD CONSTRAINT catalog_id FOREIGN KEY (catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.projects_catalog
    ADD CONSTRAINT project_id FOREIGN KEY (project_id)
    REFERENCES test.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.projects_roles
    ADD CONSTRAINT projects_roles_project_id_fkey FOREIGN KEY (project_id)
    REFERENCES test.projects (project_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.projects_roles
    ADD CONSTRAINT projects_roles_researcher_id_fkey FOREIGN KEY (researcher_id)
    REFERENCES test.researchers (researcher_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.researchers_intake
    ADD CONSTRAINT collector FOREIGN KEY (collector)
    REFERENCES test.researchers (researcher_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.researchers_intake
    ADD CONSTRAINT submitter FOREIGN KEY (submitter)
    REFERENCES test.researchers (researcher_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.researchers_intake
    ADD CONSTRAINT catalog_id FOREIGN KEY (catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.sessions
    ADD CONSTRAINT analyst FOREIGN KEY (analyst)
    REFERENCES test.researchers (researcher_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.sessions
    ADD CONSTRAINT mount_id FOREIGN KEY (mount_id)
    REFERENCES test.mounts (mount_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.drives
    ADD CONSTRAINT drive_catalog_id FOREIGN KEY (drive_catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.drives
    ADD CONSTRAINT core_catalog_id FOREIGN KEY (core_catalog_id)
    REFERENCES test.cores (core_catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.drives
    ADD CONSTRAINT station_id FOREIGN KEY (station_id)
    REFERENCES test.stations ("station_id ") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.media
    ADD CONSTRAINT catalog_id FOREIGN KEY (catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.researcher_history
    ADD CONSTRAINT researcher_id FOREIGN KEY (researcher_id)
    REFERENCES test.researchers (researcher_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.researcher_history
    ADD CONSTRAINT institution_id FOREIGN KEY (institution_id)
    REFERENCES test.institutions (institution_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS test.sample_history
    ADD CONSTRAINT catalog_id FOREIGN KEY (catalog_id)
    REFERENCES test.catalog (catalog_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;